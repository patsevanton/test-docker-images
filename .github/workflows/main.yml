name: Create new application release

# We want releases to trigger on pushes to main, and also on manual dispatch,
# so we can trigger a release manually, mainly for testing or rollbacks.
on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    # By default, github jobs GITHUB_TOKEN does not have write access
    # to the repository, nor can it call other actions through the API.
    # We need to elevate the permissions to create CHANGELOG changes
    # in the repository, create tags and call other actions.
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Based on the last tag and commits since main branch
      # (change the branch as needed), this action will determine
      # the next semver version. If there are no commits since
      # the last tag, it will warn (by default it fails)
      # and not create a new tag.
      - name: Get Next Semver Version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main
          noVersionBumpBehavior: warn

      # We will use semver action outputs as a conditional,
      # we can skip the rest of the job if there are no semver
      # changes since the last tag. Commits that do not have
      # a type, i.e. "feat:" or "fix:" will be ignored.
      # Also, less meaningful types like "chore" or "docs"
      # will be ignored too. This step can be easily changed
      # from action to direct API call if you want to customize it.
      - name: Create Tag
        uses: rickstaa/action-create-tag@v1
        if: ${{ steps.semver.outputs.next != '' }}
        with:
          tag: ${{ steps.semver.outputs.next }}
          tag_exists_error: false
          message: "Automatic tag ${{ steps.semver.outputs.next }}"

      # Based on the commits since the last tag, we will
      # generate a changelog and commit it to the repository.
      # You can customize commit types that will be ignored.
      # We use the default excludes, widened with the "release"
      # type, I wanted to see them at a glance so they are
      # copied here.
      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        if: ${{ steps.semver.outputs.next != '' }}
        with:
          token: ${{ github.token }}
          fromTag: ${{ steps.semver.outputs.next }}
          toTag: ${{ steps.semver.outputs.current }}
          excludeTypes: "chore,ci,docs,style,test,release"

      # Cleaning up, we will use our newly related
      # tag to create a release. Changelog output
      # from the previous action is used as a body.
      - name: Create Release
        uses: ncipollo/release-action@v1
        id: release
        if: ${{ steps.semver.outputs.next != '' }}
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ steps.semver.outputs.next }}
          tag: ${{ steps.semver.outputs.next }}
          body: ${{ steps.changelog.outputs.changes }}
          token: ${{ github.token }}

      # Commit the changelog to the repository. We do it
      # here to make sure that other actions were successfull.
      # Also, [skip ci] is a Github Actions specific commit
      # message, it will prevent the action from triggering
      # another run, just in case. I won't go into the details
      # why the action would not trigger anyway.
      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ steps.semver.outputs.next != '' }}
        with:
          branch: main
          commit_message: "release: changelog for ${{ steps.semver.outputs.next }} [skip ci]"
          file_pattern: CHANGELOG.md

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.semver.outputs.next }}
#          labels: |
#            org.opencontainers.image.title=${{ github.event.repository.name }}
#            org.opencontainers.image.description=${{ github.event.repository.description }}
#            org.opencontainers.image.url=${{ github.event.repository.html_url }}
#            org.opencontainers.image.source=${{ github.event.repository.html_url }}
#            org.opencontainers.image.version=${{ steps.semver.outputs.next }}
#            org.opencontainers.image.created=${{ github.event.repository.created_at }}
#            org.opencontainers.image.revision=${{ github.sha }}
#            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}